import React, { useState, useMemo } from 'react'
import { Card, Table, Button, Input, Select, Space, Tag, message } from 'antd'
import { SearchOutlined, ExportOutlined } from '@ant-design/icons'
import type { ColumnsType } from 'antd/es/table'
import MetricsCards from './components/MetricsCards'
import DisposalDrawer from './components/DisposalDrawer'
import type {
  VulnerabilityDisposalRecord,
  DisposalStatus,
  VulnerabilityLevel,
  FilterConditions,
  PaginationConfig,
  DisposalForm
} from './types'
import { generateDisposalRecords, generateDisposalMetrics } from './mockData'
import './index.css'

const VulnerabilityDisposalPage: React.FC = () => {
  // 状态管理
  const [records] = useState<VulnerabilityDisposalRecord[]>(() => generateDisposalRecords())
  const [metrics] = useState(() => generateDisposalMetrics(generateDisposalRecords()))
  const [filterConditions, setFilterConditions] = useState<FilterConditions>({
    keyword: '',
    level: 'all',
    status: 'all'
  })
  const [pagination, setPagination] = useState<PaginationConfig>({
    current: 1,
    pageSize: 20,
    total: 0
  })
  const [drawerVisible, setDrawerVisible] = useState(false)
  const [selectedRecord, setSelectedRecord] = useState<VulnerabilityDisposalRecord | null>(null)

  // 筛选后的记录
  const filteredRecords = useMemo(() => {
    return records.filter((record) => {
      // 关键字筛选
      if (filterConditions.keyword) {
        const keyword = filterConditions.keyword.toLowerCase()
        if (
          !record.name.toLowerCase().includes(keyword) &&
          !record.cveNumber.toLowerCase().includes(keyword) &&
          !record.assetName.toLowerCase().includes(keyword)
        ) {
          return false
        }
      }

      // 等级筛选
      if (filterConditions.level !== 'all' && record.level !== filterConditions.level) {
        return false
      }

      // 状态筛选
      if (filterConditions.status !== 'all' && record.status !== filterConditions.status) {
        return false
      }

      return true
    })
  }, [records, filterConditions])

  // 表格列定义
  const columns: ColumnsType<VulnerabilityDisposalRecord> = [
    {
      title: '脆弱性名称',
      dataIndex: 'name',
      key: 'name',
      width: 220,
      ellipsis: true,
      render: (text, record) => (
        <div>
          <div className="table-cell-main">{text}</div>
          <div className="table-cell-sub">{record.cveNumber}</div>
        </div>
      )
    },
    {
      title: '风险等级',
      dataIndex: 'level',
      key: 'level',
      width: 100,
      align: 'center',
      render: (level: VulnerabilityLevel) => {
        const config = {
          high: { color: 'error', text: '高危' },
          medium: { color: 'warning', text: '中危' },
          low: { color: 'success', text: '低危' }
        }
        const { color, text } = config[level]
        return <Tag color={color}>{text}</Tag>
      }
    },
    {
      title: '影响资产',
      dataIndex: 'assetName',
      key: 'assetName',
      width: 180,
      ellipsis: true,
      render: (text, record) => (
        <div>
          <div className="table-cell-main">{text}</div>
          <div className="table-cell-sub">{record.ipAddress}</div>
        </div>
      )
    },
    {
      title: '发布时间',
      dataIndex: 'publishedTime',
      key: 'publishedTime',
      width: 160
    },
    {
      title: '派发人',
      dataIndex: 'assignedBy',
      key: 'assignedBy',
      width: 100,
      render: (text) => text || '-'
    },
    {
      title: '要求完成时间',
      dataIndex: 'deadline',
      key: 'deadline',
      width: 120,
      render: (text) => text || '-'
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      width: 100,
      align: 'center',
      render: (status: DisposalStatus) => {
        const config = {
          pending: { color: 'warning', text: '待处理' },
          processing: { color: 'processing', text: '处理中' },
          completed: { color: 'success', text: '已完成' }
        }
        const { color, text } = config[status]
        return <Tag color={color}>{text}</Tag>
      }
    },
    {
      title: '操作',
      key: 'actions',
      width: 100,
      fixed: 'right',
      render: (_, record) => (
        <Space size="small">
          {record.status === 'pending' || record.status === 'processing' ? (
            <Button
              type="link"
              size="small"
              onClick={() => handleProcess(record)}
            >
              处理
            </Button>
          ) : (
            <Button
              type="link"
              size="small"
              onClick={() => handleViewDetail(record)}
            >
              查看
            </Button>
          )}
        </Space>
      )
    }
  ]

  // 处理脆弱性
  const handleProcess = (record: VulnerabilityDisposalRecord) => {
    setSelectedRecord(record)
    setDrawerVisible(true)
  }

  // 查看详情
  const handleViewDetail = (record: VulnerabilityDisposalRecord) => {
    setSelectedRecord(record)
    setDrawerVisible(true)
  }

  // 提交处理结果
  const handleSubmitDisposal = async (values: DisposalForm) => {
    console.log('提交处理结果:', values)
    // 这里应该调用API提交处理结果
    message.success('处理结果已提交')
  }

  // 导出数据
  const handleExport = () => {
    message.info('导出功能开发中...')
  }

  // 重置筛选
  const handleReset = () => {
    setFilterConditions({
      keyword: '',
      level: 'all',
      status: 'all'
    })
    setPagination({ ...pagination, current: 1 })
  }

  return (
    <div className="vulnerability-disposal-page">
      {/* 统计卡片 */}
      <MetricsCards metrics={metrics} />

      {/* 筛选操作区 */}
      <Card className="filter-card">
        <Space wrap style={{ width: '100%', justifyContent: 'space-between' }}>
          <Space wrap>
            <Input
              prefix={<SearchOutlined />}
              placeholder="搜索脆弱性名称、CVE编号、资产名称..."
              style={{ width: 280 }}
              value={filterConditions.keyword}
              onChange={(e) =>
                setFilterConditions((prev) => ({ ...prev, keyword: e.target.value }))
              }
              allowClear
            />
            <Select
              placeholder="风险等级"
              style={{ width: 140 }}
              value={filterConditions.level}
              onChange={(value) =>
                setFilterConditions((prev) => ({ ...prev, level: value }))
              }
              options={[
                { value: 'all', label: '全部等级' },
                { value: 'high', label: '高危' },
                { value: 'medium', label: '中危' },
                { value: 'low', label: '低危' }
              ]}
            />
            <Select
              placeholder="处理状态"
              style={{ width: 140 }}
              value={filterConditions.status}
              onChange={(value) =>
                setFilterConditions((prev) => ({ ...prev, status: value }))
              }
              options={[
                { value: 'all', label: '全部状态' },
                { value: 'pending', label: '待处理' },
                { value: 'processing', label: '处理中' },
                { value: 'completed', label: '已完成' }
              ]}
            />
            <Button type="primary" onClick={() => setPagination({ ...pagination, current: 1 })}>
              查询
            </Button>
            <Button onClick={handleReset}>重置</Button>
          </Space>
          <Button icon={<ExportOutlined />} onClick={handleExport}>
            导出数据
          </Button>
        </Space>
      </Card>

      {/* 脆弱性列表 */}
      <Card
        title={`脆弱性列表 (共 ${filteredRecords.length} 条记录)`}
        className="table-card"
      >
        <Table
          dataSource={filteredRecords}
          columns={columns}
          rowKey="id"
          pagination={{
            ...pagination,
            total: filteredRecords.length,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `共 ${total} 条记录`,
            onChange: (page, pageSize) => setPagination({ current: page, pageSize, total: filteredRecords.length })
          }}
          scroll={{ x: 1200 }}
        />
      </Card>

      {/* 处理抽屉 */}
      <DisposalDrawer
        visible={drawerVisible}
        record={selectedRecord}
        onClose={() => {
          setDrawerVisible(false)
          setSelectedRecord(null)
        }}
        onSubmit={handleSubmitDisposal}
      />
    </div>
  )
}

export default VulnerabilityDisposalPage
