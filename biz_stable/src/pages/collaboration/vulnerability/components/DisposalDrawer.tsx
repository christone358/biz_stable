import React, { useState } from 'react'
import { Drawer, Form, Select, Input, Button, Space, Descriptions, Tag, Upload, message } from 'antd'
import { UploadOutlined } from '@ant-design/icons'
import type { VulnerabilityDisposalRecord, DisposalForm, ProcessingMethod, DisposalStatus } from '../types'
import './DisposalDrawer.css'

const { TextArea } = Input

interface DisposalDrawerProps {
  visible: boolean
  record: VulnerabilityDisposalRecord | null
  onClose: () => void
  onSubmit: (values: DisposalForm) => void
}

const DisposalDrawer: React.FC<DisposalDrawerProps> = ({
  visible,
  record,
  onClose,
  onSubmit
}) => {
  const [form] = Form.useForm()
  const [submitting, setSubmitting] = useState(false)

  const handleSubmit = async () => {
    try {
      setSubmitting(true)
      const values = await form.validateFields()
      await onSubmit(values)
      message.success('处理记录提交成功')
      form.resetFields()
      onClose()
    } catch (error) {
      console.error('表单验证失败:', error)
    } finally {
      setSubmitting(false)
    }
  }

  const handleCancel = () => {
    form.resetFields()
    onClose()
  }

  const getLevelTag = (level: string) => {
    const config = {
      high: { color: 'error', text: '高危' },
      medium: { color: 'warning', text: '中危' },
      low: { color: 'success', text: '低危' }
    }
    const { color, text } = config[level as keyof typeof config]
    return <Tag color={color}>{text}</Tag>
  }

  const getStatusTag = (status: string) => {
    const config = {
      pending: { color: 'warning', text: '待处理' },
      processing: { color: 'processing', text: '处理中' },
      completed: { color: 'success', text: '已完成' }
    }
    const { color, text } = config[status as keyof typeof config]
    return <Tag color={color}>{text}</Tag>
  }

  const getMethodText = (method: ProcessingMethod) => {
    const methodMap = {
      version_upgrade: '版本升级',
      patch_install: '补丁安装',
      config_modify: '配置修改',
      temp_workaround: '临时规避',
      other: '其他方式'
    }
    return methodMap[method]
  }

  return (
    <Drawer
      title="脆弱性处理"
      open={visible}
      onClose={handleCancel}
      width={720}
      footer={
        <div style={{ textAlign: 'right' }}>
          <Space>
            <Button onClick={handleCancel}>取消</Button>
            <Button type="primary" onClick={handleSubmit} loading={submitting}>
              提交处理结果
            </Button>
          </Space>
        </div>
      }
    >
      {record && (
        <div className="disposal-drawer-content">
          {/* 脆弱性信息 */}
          <div className="section">
            <h3 className="section-title">脆弱性信息</h3>
            <Descriptions column={2} bordered size="small">
              <Descriptions.Item label="脆弱性名称" span={2}>
                {record.name}
              </Descriptions.Item>
              <Descriptions.Item label="CVE编号">{record.cveNumber}</Descriptions.Item>
              <Descriptions.Item label="风险等级">
                {getLevelTag(record.level)}
              </Descriptions.Item>
              <Descriptions.Item label="CVSS评分">{record.cvssScore.toFixed(1)}</Descriptions.Item>
              <Descriptions.Item label="当前状态">
                {getStatusTag(record.status)}
              </Descriptions.Item>
              <Descriptions.Item label="资产名称">{record.assetName}</Descriptions.Item>
              <Descriptions.Item label="IP地址">{record.ipAddress}</Descriptions.Item>
              <Descriptions.Item label="资产类型">{record.assetType}</Descriptions.Item>
              <Descriptions.Item label="操作系统">{record.osVersion}</Descriptions.Item>
              <Descriptions.Item label="发布时间">{record.publishedTime}</Descriptions.Item>
            </Descriptions>
          </div>

          {/* 派发信息 */}
          {record.assignedBy && (
            <div className="section">
              <h3 className="section-title">派发信息</h3>
              <Descriptions column={2} bordered size="small">
                <Descriptions.Item label="派发人">{record.assignedBy}</Descriptions.Item>
                <Descriptions.Item label="派发时间">{record.assignedTime}</Descriptions.Item>
                <Descriptions.Item label="要求完成时间" span={2}>
                  {record.deadline}
                </Descriptions.Item>
                {record.instructions && (
                  <Descriptions.Item label="处理说明" span={2}>
                    {record.instructions}
                  </Descriptions.Item>
                )}
              </Descriptions>
            </div>
          )}

          {/* 漏洞详情 */}
          <div className="section">
            <h3 className="section-title">漏洞详情</h3>
            <div className="detail-box">
              <h4>漏洞描述</h4>
              <p>{record.description}</p>
            </div>
            <div className="detail-box">
              <h4>影响范围</h4>
              <p>{record.affectedScope}</p>
            </div>
            <div className="detail-box">
              <h4>修复建议</h4>
              <p style={{ whiteSpace: 'pre-line' }}>{record.fixSuggestion}</p>
            </div>
          </div>

          {/* 处理记录 */}
          {record.processingRecords.length > 0 && (
            <div className="section">
              <h3 className="section-title">处理记录</h3>
              <div className="processing-timeline">
                {record.processingRecords.map((pr) => (
                  <div key={pr.id} className="timeline-item">
                    <div className="timeline-time">{pr.timestamp}</div>
                    <div className="timeline-content">
                      <strong>{pr.action}</strong>
                      {pr.method && <span> - {getMethodText(pr.method)}</span>}
                      {pr.result && (
                        <div className="timeline-result">{pr.result}</div>
                      )}
                      <div className="timeline-operator">操作人: {pr.operator}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* 处理表单 */}
          <div className="section">
            <h3 className="section-title">处理信息</h3>
            <Form form={form} layout="vertical">
              <Form.Item
                label="处理状态"
                name="status"
                rules={[{ required: true, message: '请选择处理状态' }]}
                initialValue={record.status === 'pending' ? 'processing' : record.status}
              >
                <Select
                  options={[
                    { value: 'processing', label: '转为处理中' },
                    { value: 'completed', label: '标记为已完成' }
                  ]}
                />
              </Form.Item>

              <Form.Item
                label="处理方式"
                name="method"
                rules={[{ required: true, message: '请选择处理方式' }]}
              >
                <Select
                  placeholder="请选择处理方式"
                  options={[
                    { value: 'version_upgrade', label: '版本升级' },
                    { value: 'patch_install', label: '补丁安装' },
                    { value: 'config_modify', label: '配置修改' },
                    { value: 'temp_workaround', label: '临时规避' },
                    { value: 'other', label: '其他方式' }
                  ]}
                />
              </Form.Item>

              <Form.Item
                label="处理结果"
                name="result"
                rules={[{ required: true, message: '请输入处理结果' }]}
              >
                <TextArea
                  rows={4}
                  placeholder="请详细描述处理过程和结果..."
                  maxLength={500}
                  showCount
                />
              </Form.Item>

              <Form.Item label="附件上传" name="attachments">
                <Upload
                  maxCount={5}
                  beforeUpload={() => false}
                >
                  <Button icon={<UploadOutlined />}>选择文件</Button>
                  <div style={{ marginTop: 8, fontSize: 12, color: '#8c8c8c' }}>
                    支持上传截图、日志等文件,最多5个,单个文件不超过5MB
                  </div>
                </Upload>
              </Form.Item>
            </Form>
          </div>
        </div>
      )}
    </Drawer>
  )
}

export default DisposalDrawer
