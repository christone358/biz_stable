import React, { useState, useMemo } from 'react'
import { Card, Table, Tag, Button, Space, Radio } from 'antd'
import { BugOutlined } from '@ant-design/icons'
import type { Vulnerability, FilterStatus } from '../types'
import type { ColumnsType } from 'antd/es/table'
import './VulnerabilityCard.css'

interface VulnerabilityCardProps {
  data: Vulnerability[]
  onHandle: (id: string) => void
  onView: (id: string) => void
}

/**
 * 脆弱性处置卡片组件
 */
const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({ data, onHandle, onView }) => {
  const [filter, setFilter] = useState<FilterStatus>('all')

  // 筛选后的数据
  const filteredData = useMemo(() => {
    if (filter === 'all') return data
    return data.filter(item => item.status === filter)
  }, [data, filter])

  // 统计数据
  const stats = useMemo(() => {
    const high = data.filter(v => v.riskLevel === 'high').length
    const medium = data.filter(v => v.riskLevel === 'medium').length
    const low = data.filter(v => v.riskLevel === 'low').length
    return { high, medium, low }
  }, [data])

  // 表格列配置
  const columns: ColumnsType<Vulnerability> = [
    {
      title: '漏洞名称',
      dataIndex: 'name',
      key: 'name',
      width: '25%',
      render: (text, record) => (
        <div>
          <div className="vulnerability-name">{text}</div>
          <div className="vulnerability-cve">{record.cveId}</div>
        </div>
      ),
    },
    {
      title: '风险等级',
      dataIndex: 'riskLevel',
      key: 'riskLevel',
      width: '10%',
      render: (level: string) => {
        const config = {
          high: { color: 'error', text: '高危' },
          medium: { color: 'warning', text: '中危' },
          low: { color: 'default', text: '低危' },
        }
        const { color, text } = config[level as keyof typeof config]
        return <Tag color={color}>{text}</Tag>
      },
    },
    {
      title: '影响资产',
      dataIndex: 'affectedAssets',
      key: 'affectedAssets',
      width: '10%',
      render: (count: number) => `${count}台服务器`,
    },
    {
      title: '影响业务',
      dataIndex: 'affectedBusiness',
      key: 'affectedBusiness',
      width: '15%',
    },
    {
      title: '发布时间',
      dataIndex: 'publishTime',
      key: 'publishTime',
      width: '10%',
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      width: '10%',
      render: (status: string) => {
        const config = {
          unhandled: { color: 'error', text: '未处理' },
          processing: { color: 'processing', text: '处理中' },
          completed: { color: 'success', text: '已完成' },
        }
        const { color, text } = config[status as keyof typeof config]
        return <Tag color={color}>{text}</Tag>
      },
    },
    {
      title: '操作',
      key: 'action',
      width: '20%',
      render: (_, record) => (
        <Space>
          <Button
            type="primary"
            size="small"
            onClick={() => onHandle(record.id)}
            style={{ width: '80px' }}
          >
            {record.status === 'processing' ? '继续处理' : '处理'}
          </Button>
          <Button
            size="small"
            onClick={() => onView(record.id)}
            style={{ width: '60px' }}
          >
            查看
          </Button>
        </Space>
      ),
    },
  ]

  return (
    <Card className="vulnerability-card">
      {/* 卡片头部 */}
      <div className="card-header">
        <h2 className="card-title">
          脆弱性处置
        </h2>
      </div>

      {/* 统计和筛选区域 */}
      <div className="filter-stats-row">
        {/* 左侧：数量统计 */}
        <Space size="middle" className="stats">
          <span className="stat-item">
            <span className="stat-dot stat-high"></span>
            高危: {stats.high}
          </span>
          <span className="stat-item">
            <span className="stat-dot stat-medium"></span>
            中危: {stats.medium}
          </span>
          <span className="stat-item">
            <span className="stat-dot stat-low"></span>
            低危: {stats.low}
          </span>
        </Space>

        {/* 右侧：状态筛选 */}
        <Radio.Group
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          buttonStyle="solid"
          size="small"
        >
          <Radio.Button value="all">全部</Radio.Button>
          <Radio.Button value="unhandled">未处理</Radio.Button>
          <Radio.Button value="processing">处理中</Radio.Button>
          <Radio.Button value="completed">已完成</Radio.Button>
        </Radio.Group>
      </div>

      {/* 表格 */}
      <Table
        columns={columns}
        dataSource={filteredData}
        rowKey="id"
        pagination={{
          pageSize: 10,
          showSizeChanger: false,
          showTotal: (total) => `共 ${total} 项`,
        }}
      />
    </Card>
  )
}

export default VulnerabilityCard
