import React, { useState, useMemo, useCallback } from 'react'
import { Card, Table, Button, Input, Select, Space, Drawer, Descriptions, Tag, Modal, Form, DatePicker, message } from 'antd'
import type { ColumnsType } from 'antd/es/table'
import DimensionTree from './DimensionTree'
import type {
  VulnerabilityRecord,
  TreeNode,
  DimensionType,
  VulnerabilityLevel,
  VulnerabilityStatus,
  FilterConditions
} from '../types'
import { generateVulnerabilityRecords, generateTreeNodes } from '../../../../mock/vulnerability-data'
import './Management.css'

const { TextArea } = Input

interface ManagementProps {
  initialFilter?: any
}

const Management: React.FC<ManagementProps> = () => {
  // 状态管理
  const [dimension, setDimension] = useState<DimensionType>('business-system' as DimensionType)
  const [treeNodes, setTreeNodes] = useState<TreeNode[]>(() => generateTreeNodes('business-system' as DimensionType))
  const [selectedNodeId, setSelectedNodeId] = useState<string | null>('all')
  const [records] = useState<VulnerabilityRecord[]>(() => generateVulnerabilityRecords())
  const [filterConditions, setFilterConditions] = useState<FilterConditions>({
    keyword: '',
    level: 'all',
    status: 'all',
    businessSystem: 'all',
    dimension: 'business-system',
    selectedTreeNode: 'all'
  })
  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([])
  const [detailDrawerVisible, setDetailDrawerVisible] = useState(false)
  const [assignModalVisible, setAssignModalVisible] = useState(false)
  const [selectedRecord, setSelectedRecord] = useState<VulnerabilityRecord | null>(null)
  const [assignForm] = Form.useForm()
  const [pagination, setPagination] = useState({ current: 1, pageSize: 20 })

  // 维度变更处理
  const handleDimensionChange = useCallback((newDimension: DimensionType) => {
    setDimension(newDimension)
    setTreeNodes(generateTreeNodes(newDimension))
    setSelectedNodeId('all')
    setFilterConditions((prev: FilterConditions) => ({ ...prev, dimension: newDimension, selectedTreeNode: 'all' }))
  }, [])

  // 节点选择处理
  const handleNodeSelect = useCallback((nodeId: string) => {
    setSelectedNodeId(nodeId)
    setFilterConditions((prev: FilterConditions) => ({ ...prev, selectedTreeNode: nodeId }))
  }, [])

  // 筛选后的记录
  const filteredRecords = useMemo(() => {
    return records.filter((record) => {
      // 关键字筛选
      if (
        filterConditions.keyword &&
        !record.name.toLowerCase().includes(filterConditions.keyword.toLowerCase()) &&
        !record.cveNumber.toLowerCase().includes(filterConditions.keyword.toLowerCase())
      ) {
        return false
      }

      // 等级筛选
      if (filterConditions.level !== 'all' && record.level !== filterConditions.level) {
        return false
      }

      // 状态筛选
      if (filterConditions.status !== 'all' && record.status !== filterConditions.status) {
        return false
      }

      // 业务系统筛选
      if (filterConditions.businessSystem !== 'all' && record.businessSystem !== filterConditions.businessSystem) {
        return false
      }

      return true
    })
  }, [records, filterConditions])

  // 表格列定义
  const columns: ColumnsType<VulnerabilityRecord> = [
    {
      title: '脆弱性名称',
      dataIndex: 'name',
      key: 'name',
      width: 200,
      ellipsis: true
    },
    {
      title: 'CVE编号',
      dataIndex: 'cveNumber',
      key: 'cveNumber',
      width: 150
    },
    {
      title: '风险等级',
      dataIndex: 'level',
      key: 'level',
      width: 100,
      align: 'center',
      render: (level: VulnerabilityLevel) => {
        const config: Record<VulnerabilityLevel, { color: string, text: string }> = {
          high: { color: 'error', text: '高危' },
          medium: { color: 'warning', text: '中危' },
          low: { color: 'success', text: '低危' },
          info: { color: 'default', text: '信息' }
        }
        const { color, text } = config[level]
        return <Tag color={color}>{text}</Tag>
      }
    },
    {
      title: '业务系统',
      dataIndex: 'businessSystem',
      key: 'businessSystem',
      width: 150,
      ellipsis: true
    },
    {
      title: '发现时间',
      dataIndex: 'discoveredTime',
      key: 'discoveredTime',
      width: 180
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      width: 100,
      align: 'center',
      render: (status: VulnerabilityStatus) => {
        const config: Record<VulnerabilityStatus, { color: string, text: string }> = {
          pending: { color: 'warning', text: '待处理' },
          processing: { color: 'processing', text: '处理中' },
          resolved: { color: 'success', text: '已解决' },
          overdue: { color: 'error', text: '已超期' }
        }
        const { color, text } = config[status]
        return <Tag color={color}>{text}</Tag>
      }
    },
    {
      title: '操作',
      key: 'actions',
      width: 150,
      fixed: 'right',
      render: (_, record) => (
        <Space>
          <Button type="link" size="small" onClick={() => handleViewDetail(record)}>
            查看详情
          </Button>
          {record.status === 'pending' ? (
            <Button type="link" size="small" onClick={() => handleAssign(record)}>
              派发任务
            </Button>
          ) : (
            <Button type="link" size="small" onClick={() => handleAssign(record)}>
              重新派发
            </Button>
          )}
        </Space>
      )
    }
  ]

  // 查看详情
  const handleViewDetail = (record: VulnerabilityRecord) => {
    setSelectedRecord(record)
    setDetailDrawerVisible(true)
  }

  // 派发任务
  const handleAssign = (record: VulnerabilityRecord) => {
    setSelectedRecord(record)
    setAssignModalVisible(true)
    assignForm.resetFields()
  }

  // 批量派发
  const handleBatchAssign = () => {
    if (selectedRowKeys.length === 0) {
      message.warning('请先选择要派发的脆弱性')
      return
    }
    setAssignModalVisible(true)
    assignForm.resetFields()
  }

  // 提交派发任务
  const handleSubmitAssign = async () => {
    try {
      await assignForm.validateFields()
      message.success('任务派发成功！')
      setAssignModalVisible(false)
      setSelectedRowKeys([])
    } catch (error) {
      console.error('表单验证失败:', error)
    }
  }

  // 导出数据
  const handleExport = () => {
    message.success('正在导出数据...')
  }

  // 行选择配置
  const rowSelection = {
    selectedRowKeys,
    onChange: (keys: React.Key[]) => {
      setSelectedRowKeys(keys as string[])
    }
  }

  return (
    <div className="vulnerability-management">
      <div className="management-layout">
        {/* 左侧树形筛选 */}
        <div className="management-sidebar">
          <DimensionTree
            dimension={dimension}
            nodes={treeNodes}
            selectedNodeId={selectedNodeId}
            onDimensionChange={handleDimensionChange}
            onNodeSelect={handleNodeSelect}
            onSearchChange={() => {}}
          />
        </div>

        {/* 右侧内容区 */}
        <div className="management-content">
          {/* 操作栏 */}
          <Card className="action-bar">
            <Space wrap style={{ width: '100%', justifyContent: 'space-between' }}>
              <Space wrap>
                <Input
                  placeholder="搜索脆弱性名称、CVE编号..."
                  style={{ width: 200 }}
                  value={filterConditions.keyword}
                  onChange={(e) =>
                    setFilterConditions((prev) => ({ ...prev, keyword: e.target.value }))
                  }
                  allowClear
                />
                <Select
                  placeholder="风险等级"
                  style={{ width: 140 }}
                  value={filterConditions.level}
                  onChange={(value) => setFilterConditions((prev) => ({ ...prev, level: value }))}
                  options={[
                    { value: 'all', label: '全部风险等级' },
                    { value: 'high', label: '高危' },
                    { value: 'medium', label: '中危' },
                    { value: 'low', label: '低危' },
                    { value: 'info', label: '信息' }
                  ]}
                />
                <Select
                  placeholder="状态"
                  style={{ width: 120 }}
                  value={filterConditions.status}
                  onChange={(value) => setFilterConditions((prev) => ({ ...prev, status: value }))}
                  options={[
                    { value: 'all', label: '全部状态' },
                    { value: 'pending', label: '待处理' },
                    { value: 'processing', label: '处理中' },
                    { value: 'resolved', label: '已解决' },
                    { value: 'overdue', label: '已超期' }
                  ]}
                />
                <Button type="primary" onClick={() => setPagination({ ...pagination, current: 1 })}>
                  查询
                </Button>
                <Button onClick={() => setFilterConditions((prev: FilterConditions) => ({
                  ...prev,
                  keyword: '',
                  level: 'all',
                  status: 'all',
                  businessSystem: 'all'
                }))}>
                  重置
                </Button>
              </Space>
              <Space>
                <Button type="primary" onClick={handleBatchAssign}>
                  批量派发
                </Button>
                <Button onClick={handleExport}>导出数据</Button>
              </Space>
            </Space>
          </Card>

          {/* 脆弱性列表 */}
          <Card
            title={`脆弱性列表 (共 ${filteredRecords.length} 条记录)`}
            style={{ marginTop: 16 }}
          >
            <Table
              dataSource={filteredRecords}
              columns={columns}
              rowKey="id"
              rowSelection={rowSelection}
              pagination={{
                ...pagination,
                total: filteredRecords.length,
                showSizeChanger: true,
                showQuickJumper: true,
                showTotal: (total) => `共 ${total} 条记录`,
                onChange: (page, pageSize) => setPagination({ current: page, pageSize })
              }}
              scroll={{ x: 1200 }}
            />
          </Card>
        </div>
      </div>

      {/* 详情抽屉 */}
      <Drawer
        title="脆弱性详情"
        open={detailDrawerVisible}
        onClose={() => setDetailDrawerVisible(false)}
        width={720}
        extra={
          <Space>
            <Button type="primary" onClick={() => {
              handleAssign(selectedRecord!)
              setDetailDrawerVisible(false)
            }}>
              派发任务
            </Button>
            <Button onClick={() => setDetailDrawerVisible(false)}>关闭</Button>
          </Space>
        }
      >
        {selectedRecord && (
          <div>
            <Descriptions title="基本信息" column={2} bordered>
              <Descriptions.Item label="脆弱性名称" span={2}>
                {selectedRecord.name}
              </Descriptions.Item>
              <Descriptions.Item label="CVE编号">{selectedRecord.cveNumber}</Descriptions.Item>
              <Descriptions.Item label="风险等级">
                <Tag color={selectedRecord.level === 'high' ? 'error' : selectedRecord.level === 'medium' ? 'warning' : 'success'}>
                  {selectedRecord.level === 'high' ? '高危' : selectedRecord.level === 'medium' ? '中危' : '低危'}
                </Tag>
              </Descriptions.Item>
              <Descriptions.Item label="CVSS评分">{selectedRecord.cvssScore.toFixed(1)}</Descriptions.Item>
              <Descriptions.Item label="业务系统">{selectedRecord.businessSystem}</Descriptions.Item>
              <Descriptions.Item label="资产名称">{selectedRecord.assetName}</Descriptions.Item>
              <Descriptions.Item label="IP地址">{selectedRecord.ipAddress}</Descriptions.Item>
              <Descriptions.Item label="发现时间">{selectedRecord.discoveredTime}</Descriptions.Item>
              <Descriptions.Item label="当前状态">
                <Tag color={selectedRecord.status === 'pending' ? 'warning' : selectedRecord.status === 'processing' ? 'processing' : 'success'}>
                  {selectedRecord.status === 'pending' ? '待处理' : selectedRecord.status === 'processing' ? '处理中' : '已解决'}
                </Tag>
              </Descriptions.Item>
            </Descriptions>

            <Descriptions title="漏洞描述" column={1} bordered style={{ marginTop: 24 }}>
              <Descriptions.Item>{selectedRecord.description}</Descriptions.Item>
            </Descriptions>

            <Descriptions title="影响范围" column={1} bordered style={{ marginTop: 24 }}>
              <Descriptions.Item>{selectedRecord.affectedScope}</Descriptions.Item>
            </Descriptions>

            <Descriptions title="修复建议" column={1} bordered style={{ marginTop: 24 }}>
              <Descriptions.Item>
                <div style={{ whiteSpace: 'pre-line' }}>{selectedRecord.fixSuggestion}</div>
              </Descriptions.Item>
            </Descriptions>

            <Descriptions title="处理记录" column={1} bordered style={{ marginTop: 24 }}>
              <Descriptions.Item>
                {selectedRecord.processingRecords.map((record) => (
                  <div key={record.id} style={{ marginBottom: 12 }}>
                    <strong>{record.timestamp}</strong> - {record.action}
                  </div>
                ))}
              </Descriptions.Item>
            </Descriptions>
          </div>
        )}
      </Drawer>

      {/* 派发任务模态框 */}
      <Modal
        title="派发任务"
        open={assignModalVisible}
        onOk={handleSubmitAssign}
        onCancel={() => setAssignModalVisible(false)}
        okText="确认派发"
        cancelText="取消"
        width={600}
      >
        <Form form={assignForm} layout="vertical">
          <Form.Item
            label="派发给"
            name="department"
            rules={[{ required: true, message: '请选择责任单位' }]}
          >
            <Select
              placeholder="请选择责任单位"
              options={[
                { value: 'dept1', label: '基础架构组' },
                { value: 'dept2', label: '支付开发部' },
                { value: 'dept3', label: '用户中心开发部' },
                { value: 'dept4', label: '订单运营组' },
                { value: 'dept5', label: '数据平台组' }
              ]}
            />
          </Form.Item>

          <Form.Item
            label="处理人"
            name="assignee"
            rules={[{ required: true, message: '请选择处理人' }]}
          >
            <Select
              placeholder="请选择处理人"
              options={[
                { value: 'user1', label: '赵六' },
                { value: 'user2', label: '王五' },
                { value: 'user3', label: '李四' },
                { value: 'user4', label: '张三' },
                { value: 'user5', label: '钱七' }
              ]}
            />
          </Form.Item>

          <Form.Item label="优先级" name="priority" initialValue="medium">
            <Select
              options={[
                { value: 'high', label: '高' },
                { value: 'medium', label: '中' },
                { value: 'low', label: '低' }
              ]}
            />
          </Form.Item>

          <Form.Item
            label="要求完成时间"
            name="deadline"
            rules={[{ required: true, message: '请选择完成时间' }]}
          >
            <DatePicker style={{ width: '100%' }} />
          </Form.Item>

          <Form.Item label="处理说明" name="instructions">
            <TextArea rows={4} placeholder="请输入处理说明或要求..." />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  )
}

export default Management
