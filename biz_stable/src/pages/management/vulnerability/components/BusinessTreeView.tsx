import React, { useMemo, useState } from 'react'
import { Tree, Badge } from 'antd'
import { FolderOutlined, FileOutlined, WarningOutlined } from '@ant-design/icons'
import type { DataNode } from 'antd/es/tree'
import { generateBusinessVulnerabilityTree } from '../../../../mock/vulnerability-data'

interface BusinessTreeViewProps {
  searchKeyword: string
  selectedId: string | null
  onSelect: (nodeId: string) => void
}

const BusinessTreeView: React.FC<BusinessTreeViewProps> = ({
  searchKeyword,
  selectedId,
  onSelect
}) => {
  // 获取业务树数据
  const businessTree = useMemo(() => generateBusinessVulnerabilityTree(), [])

  // 转换为Ant Design Tree需要的数据格式
  const treeData: DataNode[] = useMemo(() => {
    const convertToTreeData = (nodes: any[]): DataNode[] => {
      return nodes.map((node) => ({
        key: node.id,
        title: (
          <div className="tree-node-title">
            <span className="node-name">{node.name}</span>
            <Badge count={node.count} style={{ backgroundColor: '#1890ff' }} />
          </div>
        ),
        icon: node.children ? <FolderOutlined /> : <FileOutlined />,
        children: node.children ? convertToTreeData(node.children) : undefined
      }))
    }

    // 全部选项 - 放在最前面，不缩进
    const allNode: DataNode = {
      key: 'all',
      title: (
        <div className="tree-node-title">
          <span className="node-name">全部</span>
          <Badge count={businessTree.totalCount} style={{ backgroundColor: '#1890ff' }} />
        </div>
      ),
      icon: <FolderOutlined />,
      className: 'tree-node-all'
    }

    // 未知业务节点 - 放在第二位
    const unknownNode: DataNode = {
      key: 'business-unknown',
      title: (
        <div className="tree-node-title tree-node-unknown">
          <WarningOutlined style={{ color: '#faad14', marginRight: 4 }} />
          <span className="node-name">未知业务</span>
          <Badge count={businessTree.unknownCount} style={{ backgroundColor: '#faad14' }} />
        </div>
      ),
      icon: <WarningOutlined style={{ color: '#faad14' }} />
    }

    // 业务树节点 - 放在后面
    const businessNodes = convertToTreeData(businessTree.businesses)

    return [allNode, unknownNode, ...businessNodes]
  }, [businessTree])

  // 搜索过滤
  const filteredTreeData = useMemo(() => {
    if (!searchKeyword) return treeData

    const filterNodes = (nodes: DataNode[]): DataNode[] => {
      return nodes
        .map((node) => {
          const title = typeof node.title === 'string' ? node.title : ''
          const matches = title.toLowerCase().includes(searchKeyword.toLowerCase())

          if (node.children) {
            const filteredChildren = filterNodes(node.children)
            if (filteredChildren.length > 0 || matches) {
              return { ...node, children: filteredChildren }
            }
          } else if (matches) {
            return node
          }

          return null
        })
        .filter(Boolean) as DataNode[]
    }

    return filterNodes(treeData)
  }, [treeData, searchKeyword])

  // 获取所有可展开的节点key
  const getAllExpandableKeys = (nodes: DataNode[]): string[] => {
    const keys: string[] = []
    const traverse = (nodeList: DataNode[]) => {
      nodeList.forEach((node) => {
        if (node.children && node.children.length > 0) {
          keys.push(node.key as string)
          traverse(node.children)
        }
      })
    }
    traverse(nodes)
    return keys
  }

  // 展开状态管理
  const [expandedKeys, setExpandedKeys] = useState<string[]>(() => {
    // 默认展开所有节点
    return getAllExpandableKeys(treeData)
  })

  // 搜索时自动展开匹配节点
  const searchExpandedKeys = useMemo(() => {
    if (!searchKeyword) return expandedKeys

    return getAllExpandableKeys(filteredTreeData)
  }, [filteredTreeData, searchKeyword, expandedKeys])

  // 节点选择
  const handleSelect = (selectedKeys: React.Key[]) => {
    if (selectedKeys.length > 0) {
      onSelect(selectedKeys[0] as string)
    }
  }

  // 处理展开/折叠
  const handleExpand = (keys: React.Key[]) => {
    setExpandedKeys(keys as string[])
  }

  return (
    <div className="business-tree-view">
      <Tree
        treeData={filteredTreeData}
        selectedKeys={selectedId ? [selectedId] : []}
        expandedKeys={searchKeyword ? searchExpandedKeys : expandedKeys}
        onExpand={handleExpand}
        onSelect={handleSelect}
        showIcon
        blockNode
      />
    </div>
  )
}

export default BusinessTreeView
