/**
 * 脆弱性筛选视图组件
 * 支持两种视角：受影响业务（树形结构）和修复单位（列表结构）
 */

import React, { useState } from 'react'
import { Card, Segmented, Input } from 'antd'
import { SearchOutlined } from '@ant-design/icons'
import BusinessTreeView from './BusinessTreeView'
import DepartmentListView from './DepartmentListView'
import './VulnerabilityFilter.css'

export type ViewType = 'business' | 'department'

export interface FilterSelection {
  viewType: ViewType
  selectedId: string | null
}

interface VulnerabilityFilterProps {
  onFilterChange: (selection: FilterSelection) => void
}

const VulnerabilityFilter: React.FC<VulnerabilityFilterProps> = ({ onFilterChange }) => {
  const [viewType, setViewType] = useState<ViewType>('business')
  const [searchKeyword, setSearchKeyword] = useState<string>('')
  const [selectedId, setSelectedId] = useState<string | null>('all')

  // 视角切换
  const handleViewChange = (value: string | number) => {
    const newViewType = value as ViewType
    setViewType(newViewType)
    setSelectedId('all')
    setSearchKeyword('')
    onFilterChange({
      viewType: newViewType,
      selectedId: 'all'
    })
  }

  // 节点选择
  const handleNodeSelect = (nodeId: string) => {
    setSelectedId(nodeId)
    onFilterChange({
      viewType,
      selectedId: nodeId
    })
  }

  // 搜索
  const handleSearch = (value: string) => {
    setSearchKeyword(value)
  }

  return (
    <Card className="vulnerability-filter-card" styles={{ body: { padding: 0 } }}>
      {/* 标题 */}
      <div className="filter-header">
        <span className="filter-title">筛选视图</span>
      </div>

      {/* 视角切换器 */}
      <div className="filter-view-switch">
        <Segmented
          value={viewType}
          onChange={handleViewChange}
          options={[
            { label: '受影响业务', value: 'business' },
            { label: '修复单位', value: 'department' }
          ]}
          block
        />
      </div>

      {/* 搜索框 */}
      <div className="filter-search">
        <Input
          placeholder={viewType === 'business' ? '搜索业务...' : '搜索单位...'}
          prefix={<SearchOutlined />}
          value={searchKeyword}
          onChange={(e) => handleSearch(e.target.value)}
          allowClear
        />
      </div>

      {/* 内容区域 */}
      <div className="filter-content">
        {viewType === 'business' ? (
          <BusinessTreeView
            searchKeyword={searchKeyword}
            selectedId={selectedId}
            onSelect={handleNodeSelect}
          />
        ) : (
          <DepartmentListView
            searchKeyword={searchKeyword}
            selectedId={selectedId}
            onSelect={handleNodeSelect}
          />
        )}
      </div>
    </Card>
  )
}

export default VulnerabilityFilter
