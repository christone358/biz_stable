import React, { useState, useMemo } from 'react'
import { Card, Row, Col, Table, Progress, Space, Button, Modal, Tag } from 'antd'
import { ArrowUpOutlined, ArrowDownOutlined, RiseOutlined, FallOutlined } from '@ant-design/icons'
import ReactECharts from 'echarts-for-react'
import type { ColumnsType } from 'antd/es/table'
import type {
  VulnerabilityMetrics,
  SystemVulnerabilityStat,
  DepartmentEfficiencyStat,
  TrendData,
  RiskDistribution,
  UnconfirmedAssetVulnerability
} from '../../types'
import {
  generateVulnerabilityMetrics,
  generateSystemVulnerabilityStats,
  generateDepartmentEfficiencyStats,
  generateTrendData,
  generateRiskDistribution,
  generateUnconfirmedAssetVulnerabilities
} from '../../../../mock/vulnerability-data'
import './Overview.css'

interface OverviewProps {
  onSwitchToManagement: (filter?: any) => void
}

const Overview: React.FC<OverviewProps> = ({ onSwitchToManagement }) => {
  const [trendPeriod, setTrendPeriod] = useState<'week' | 'month' | 'quarter'>('week')
  const [unconfirmedModalVisible, setUnconfirmedModalVisible] = useState(false)

  // 加载数据
  const metrics = useMemo<VulnerabilityMetrics>(() => generateVulnerabilityMetrics(), [])
  const systemStats = useMemo<SystemVulnerabilityStat[]>(() => generateSystemVulnerabilityStats(), [])
  const deptStats = useMemo<DepartmentEfficiencyStat[]>(() => generateDepartmentEfficiencyStats(), [])
  const trendData = useMemo<TrendData[]>(() => generateTrendData(trendPeriod), [trendPeriod])
  const riskDistribution = useMemo<RiskDistribution[]>(() => generateRiskDistribution(), [])
  const unconfirmedAssets = useMemo<UnconfirmedAssetVulnerability[]>(
    () => generateUnconfirmedAssetVulnerabilities(),
    []
  )

  // KPI卡片点击处理
  const handleKpiClick = (type: string) => {
    onSwitchToManagement({ filterType: type })
  }

  // 趋势图配置
  const trendChartOption = {
    tooltip: {
      trigger: 'axis'
    },
    legend: {
      data: ['主机漏洞', 'Web漏洞', '配置缺陷', '弱口令'],
      right: 10,
      top: 0
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'category',
      boundaryGap: false,
      data: trendData.map((d) => d.date)
    },
    yAxis: {
      type: 'value'
    },
    series: [
      {
        name: '主机漏洞',
        type: 'line',
        data: trendData.map((d) => d.hostVulnerability),
        smooth: true,
        lineStyle: { width: 3 },
        symbol: 'circle',
        symbolSize: 6
      },
      {
        name: 'Web漏洞',
        type: 'line',
        data: trendData.map((d) => d.webVulnerability),
        smooth: true,
        lineStyle: { width: 3 },
        symbol: 'circle',
        symbolSize: 6
      },
      {
        name: '配置缺陷',
        type: 'line',
        data: trendData.map((d) => d.configDefect),
        smooth: true,
        lineStyle: { width: 3 },
        symbol: 'circle',
        symbolSize: 6
      },
      {
        name: '弱口令',
        type: 'line',
        data: trendData.map((d) => d.weakPassword),
        smooth: true,
        lineStyle: { width: 3 },
        symbol: 'circle',
        symbolSize: 6
      }
    ]
  }

  // 风险分布图配置
  const riskChartOption = {
    tooltip: {
      trigger: 'item',
      formatter: '{a} <br/>{b}: {c} ({d}%)'
    },
    legend: {
      orient: 'vertical',
      right: 10,
      top: 'center',
      data: ['高危', '中危', '低危', '信息']
    },
    series: [
      {
        name: '风险等级',
        type: 'pie',
        radius: ['50%', '70%'],
        avoidLabelOverlap: false,
        label: {
          show: false,
          position: 'center'
        },
        emphasis: {
          label: {
            show: true,
            fontSize: '18',
            fontWeight: 'bold'
          }
        },
        labelLine: {
          show: false
        },
        data: [
          { value: riskDistribution[0]?.count || 0, name: '高危', itemStyle: { color: '#f5222d' } },
          { value: riskDistribution[1]?.count || 0, name: '中危', itemStyle: { color: '#fa8c16' } },
          { value: riskDistribution[2]?.count || 0, name: '低危', itemStyle: { color: '#52c41a' } },
          { value: riskDistribution[3]?.count || 0, name: '信息', itemStyle: { color: '#1890ff' } }
        ]
      }
    ]
  }

  // 业务系统表格列定义
  const systemColumns: ColumnsType<SystemVulnerabilityStat> = [
    {
      title: '业务系统',
      dataIndex: 'name',
      key: 'name',
      render: (text) => <span style={{ cursor: 'pointer', color: '#1890ff' }}>{text}</span>
    },
    {
      title: '脆弱性数量',
      dataIndex: 'totalCount',
      key: 'totalCount',
      align: 'center'
    },
    {
      title: '高危数量',
      dataIndex: 'highRiskCount',
      key: 'highRiskCount',
      align: 'center'
    },
    {
      title: '风险趋势',
      dataIndex: 'riskTrend',
      key: 'riskTrend',
      align: 'center',
      render: (text, record) => (
        <Space>
          {record.riskTrendUp ? <RiseOutlined style={{ color: '#f5222d' }} /> : <FallOutlined style={{ color: '#52c41a' }} />}
          <span style={{ color: record.riskTrendUp ? '#f5222d' : '#52c41a' }}>{text}</span>
        </Space>
      )
    },
    {
      title: '状态',
      dataIndex: 'riskLevel',
      key: 'riskLevel',
      align: 'center',
      render: (level) => {
        const config = {
          high: { color: 'error', text: '高风险' },
          medium: { color: 'warning', text: '中风险' },
          low: { color: 'success', text: '低风险' },
          info: { color: 'default', text: '信息' }
        }
        const { color, text } = config[level] || config.info
        return <Tag color={color}>{text}</Tag>
      }
    }
  ]

  // 部门处置表格列定义
  const deptColumns: ColumnsType<DepartmentEfficiencyStat> = [
    {
      title: '责任单位',
      dataIndex: 'name',
      key: 'name',
      render: (text) => <span style={{ cursor: 'pointer', color: '#1890ff' }}>{text}</span>
    },
    {
      title: '总任务数',
      dataIndex: 'totalTasks',
      key: 'totalTasks',
      align: 'center'
    },
    {
      title: '已处置',
      dataIndex: 'resolvedTasks',
      key: 'resolvedTasks',
      align: 'center'
    },
    {
      title: '修复率',
      dataIndex: 'fixRate',
      key: 'fixRate',
      align: 'center',
      render: (rate) => `${rate}%`
    },
    {
      title: '效率分',
      dataIndex: 'efficiencyScore',
      key: 'efficiencyScore',
      align: 'center',
      render: (score) => (
        <Space style={{ width: '100%' }}>
          <Progress
            percent={score}
            strokeColor={score >= 80 ? '#52c41a' : score >= 60 ? '#faad14' : '#f5222d'}
            showInfo={false}
            style={{ width: 100 }}
          />
          <span style={{ color: score >= 80 ? '#52c41a' : score >= 60 ? '#faad14' : '#f5222d', fontWeight: 500 }}>
            {score}
          </span>
        </Space>
      )
    }
  ]

  // 未确认资产表格列定义
  const unconfirmedColumns: ColumnsType<UnconfirmedAssetVulnerability> = [
    {
      title: '资产名称',
      dataIndex: 'assetName',
      key: 'assetName'
    },
    {
      title: '脆弱性类型',
      dataIndex: 'vulnerabilityType',
      key: 'vulnerabilityType'
    },
    {
      title: '风险等级',
      dataIndex: 'riskLevel',
      key: 'riskLevel',
      render: (level) => {
        const config = {
          high: { color: 'error', text: '高风险' },
          medium: { color: 'warning', text: '中风险' },
          low: { color: 'success', text: '低风险' }
        }
        const { color, text } = config[level] || config.low
        return <Tag color={color}>{text}</Tag>
      }
    },
    {
      title: '发现时间',
      dataIndex: 'discoveredTime',
      key: 'discoveredTime'
    },
    {
      title: '操作',
      key: 'actions',
      render: () => (
        <Space>
          <Button size="small" type="link">
            确认
          </Button>
          <Button size="small" type="link" danger>
            忽略
          </Button>
        </Space>
      )
    }
  ]

  return (
    <div className="vulnerability-overview">
      {/* KPI指标卡片 */}
      <Row gutter={16} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={12} lg={6}>
          <Card
            className="kpi-card kpi-card-primary"
            hoverable
            onClick={() => handleKpiClick('total')}
          >
            <div className="kpi-title">总脆弱性数量</div>
            <div className="kpi-value">{metrics.total.toLocaleString()}</div>
            <div className="kpi-trend kpi-trend-up">
              <ArrowUpOutlined /> 较上周 {metrics.totalTrend}
            </div>
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card
            className="kpi-card kpi-card-warning"
            hoverable
            onClick={() => handleKpiClick('pending')}
          >
            <div className="kpi-title">待处置脆弱性</div>
            <div className="kpi-value">{metrics.pending.toLocaleString()}</div>
            <div className="kpi-trend kpi-trend-down">
              <ArrowDownOutlined /> 较上周 {metrics.pendingTrend}
            </div>
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card
            className="kpi-card kpi-card-danger"
            hoverable
            onClick={() => handleKpiClick('highRisk')}
          >
            <div className="kpi-title">高危脆弱性</div>
            <div className="kpi-value">{metrics.highRisk.toLocaleString()}</div>
            <div className="kpi-trend kpi-trend-up">
              <ArrowUpOutlined /> 较上周 {metrics.highRiskTrend}
            </div>
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card
            className="kpi-card kpi-card-purple"
            hoverable
            onClick={() => setUnconfirmedModalVisible(true)}
          >
            <div className="kpi-title">未确认资产脆弱性</div>
            <div className="kpi-value">{metrics.unconfirmed.toLocaleString()}</div>
            <div className="kpi-trend kpi-trend-up">
              <ArrowUpOutlined /> 较上周 {metrics.unconfirmedTrend}
            </div>
          </Card>
        </Col>
      </Row>

      {/* 表格区域 */}
      <Row gutter={16} style={{ marginBottom: 24 }}>
        <Col xs={24} lg={12}>
          <Card
            title="业务系统存在脆弱性"
            extra={
              <Button type="link" onClick={() => onSwitchToManagement({ filterType: 'systemTop' })}>
                查看全部
              </Button>
            }
          >
            <Table
              dataSource={systemStats}
              columns={systemColumns}
              rowKey="id"
              pagination={false}
              size="middle"
              onRow={(record) => ({
                onClick: () => onSwitchToManagement({ system: record.name })
              })}
            />
          </Card>
        </Col>
        <Col xs={24} lg={12}>
          <Card
            title="运维责任单位处置"
            extra={
              <Button type="link" onClick={() => onSwitchToManagement({ filterType: 'deptEfficiency' })}>
                查看全部
              </Button>
            }
          >
            <Table
              dataSource={deptStats}
              columns={deptColumns}
              rowKey="id"
              pagination={false}
              size="middle"
              onRow={(record) => ({
                onClick: () => onSwitchToManagement({ department: record.name })
              })}
            />
          </Card>
        </Col>
      </Row>

      {/* 图表区域 */}
      <Row gutter={16}>
        <Col xs={24} lg={12}>
          <Card
            title="脆弱性变化趋势"
            extra={
              <Space>
                <Button
                  type={trendPeriod === 'week' ? 'primary' : 'default'}
                  size="small"
                  onClick={() => setTrendPeriod('week')}
                >
                  近一周
                </Button>
                <Button
                  type={trendPeriod === 'month' ? 'primary' : 'default'}
                  size="small"
                  onClick={() => setTrendPeriod('month')}
                >
                  近一月
                </Button>
                <Button
                  type={trendPeriod === 'quarter' ? 'primary' : 'default'}
                  size="small"
                  onClick={() => setTrendPeriod('quarter')}
                >
                  近一季度
                </Button>
              </Space>
            }
          >
            <ReactECharts option={trendChartOption} style={{ height: 320 }} />
          </Card>
        </Col>
        <Col xs={24} lg={12}>
          <Card
            title="风险等级分布"
            extra={
              <Button type="link" onClick={() => onSwitchToManagement({ filterType: 'riskDistribution' })}>
                查看详情
              </Button>
            }
          >
            <ReactECharts option={riskChartOption} style={{ height: 320 }} />
          </Card>
        </Col>
      </Row>

      {/* 未确认资产模态框 */}
      <Modal
        title="未确认资产的脆弱性信息"
        open={unconfirmedModalVisible}
        onCancel={() => setUnconfirmedModalVisible(false)}
        width={900}
        footer={[
          <Button key="batch" type="primary">
            批量处理
          </Button>,
          <Button key="close" onClick={() => setUnconfirmedModalVisible(false)}>
            关闭
          </Button>
        ]}
      >
        <Table
          dataSource={unconfirmedAssets.slice(0, 10)}
          columns={unconfirmedColumns}
          rowKey="id"
          pagination={{
            total: unconfirmedAssets.length,
            pageSize: 10,
            showTotal: (total) => `共 ${total} 条记录`
          }}
        />
      </Modal>
    </div>
  )
}

export default Overview
