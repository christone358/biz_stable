import type {
  VulnerabilityRecord,
  VulnerabilityMetrics,
  SystemVulnerabilityStat,
  DepartmentEfficiencyStat,
  TrendData,
  RiskDistribution,
  TreeNode,
  UnconfirmedAssetVulnerability,
  VulnerabilityLevel,
  VulnerabilityStatus,
  DimensionType
} from '../pages/management/vulnerability/types'

// 业务系统列表 - 与业务树中的具体系统名称对应
const BUSINESS_SYSTEMS = [
  'PC门户',
  'H5门户',
  'iOS版',
  'Android版',
  '小程序入口',
  '支付网关',
  '对账服务',
  '统一身份认证',
  '统一客服',
  '统一物流快递',
  '公共信息库',
  '人口信息库',
  '空间地理信息库',
  '企业开办一件事',
  '出生一件事',
  '结婚落户一件事',
  '创新创业一件事'
]

// 责任单位列表
const DEPARTMENTS = [
  '基础架构组',
  '订单运营组',
  '用户中心开发部',
  '支付开发部',
  '数据平台组'
]

// 脆弱性类型列表
const VULNERABILITY_TYPES = [
  '主机漏洞',
  'Web漏洞',
  '配置缺陷',
  '弱口令',
  '数据库漏洞'
]

// 脆弱性名称样本
const VULNERABILITY_NAMES = [
  'Apache Log4j2 远程代码执行漏洞',
  'Spring Framework 远程代码执行漏洞',
  'OpenSSL 缓冲区溢出漏洞',
  'Redis 未授权访问漏洞',
  'Nginx 路径遍历漏洞',
  'MySQL 弱口令漏洞',
  'Tomcat 信息泄露漏洞',
  'Docker 容器逃逸漏洞'
]

// 处理人列表
const ASSIGNEES = ['张三', '李四', '王五', '赵六', '钱七']

// 生成KPI指标数据
export const generateVulnerabilityMetrics = (): VulnerabilityMetrics => {
  return {
    total: 1258,
    totalTrend: '+12%',
    pending: 386,
    pendingTrend: '-5%',
    highRisk: 142,
    highRiskTrend: '+8%',
    unconfirmed: 78,
    unconfirmedTrend: '+15%'
  }
}

// 生成业务系统脆弱性统计
export const generateSystemVulnerabilityStats = (): SystemVulnerabilityStat[] => {
  return [
    {
      id: 'sys-1',
      name: '统一身份认证系统',
      totalCount: 156,
      highRiskCount: 32,
      riskTrend: '+12%',
      riskTrendUp: true,
      riskLevel: 'high' as VulnerabilityLevel
    },
    {
      id: 'sys-2',
      name: '统一总客服系统',
      totalCount: 134,
      highRiskCount: 28,
      riskTrend: '+8%',
      riskTrendUp: true,
      riskLevel: 'high' as VulnerabilityLevel
    },
    {
      id: 'sys-3',
      name: '统一公共支付系统',
      totalCount: 98,
      highRiskCount: 15,
      riskTrend: '-5%',
      riskTrendUp: false,
      riskLevel: 'medium' as VulnerabilityLevel
    },
    {
      id: 'sys-4',
      name: '统一物流快递系统',
      totalCount: 76,
      highRiskCount: 12,
      riskTrend: '+3%',
      riskTrendUp: true,
      riskLevel: 'medium' as VulnerabilityLevel
    },
    {
      id: 'sys-5',
      name: '统一数据交换平台',
      totalCount: 65,
      highRiskCount: 8,
      riskTrend: '-7%',
      riskTrendUp: false,
      riskLevel: 'low' as VulnerabilityLevel
    }
  ]
}

// 生成部门处置效率统计
export const generateDepartmentEfficiencyStats = (): DepartmentEfficiencyStat[] => {
  return [
    {
      id: 'dept-1',
      name: '基础架构组',
      totalTasks: 142,
      resolvedTasks: 132,
      fixRate: 92,
      efficiencyScore: 92
    },
    {
      id: 'dept-2',
      name: '订单运营组',
      totalTasks: 128,
      resolvedTasks: 110,
      fixRate: 85,
      efficiencyScore: 85
    },
    {
      id: 'dept-3',
      name: '用户中心开发部',
      totalTasks: 135,
      resolvedTasks: 102,
      fixRate: 75,
      efficiencyScore: 75
    },
    {
      id: 'dept-4',
      name: '支付开发部',
      totalTasks: 142,
      resolvedTasks: 92,
      fixRate: 65,
      efficiencyScore: 65
    },
    {
      id: 'dept-5',
      name: '数据平台组',
      totalTasks: 98,
      resolvedTasks: 76,
      fixRate: 78,
      efficiencyScore: 78
    }
  ]
}

// 生成趋势数据
export const generateTrendData = (period: 'week' | 'month' | 'quarter'): TrendData[] => {
  const dates: string[] = []
  const baseDate = new Date('2023-07-01')

  let days = 7
  if (period === 'month') days = 30
  if (period === 'quarter') days = 90

  for (let i = 0; i < days; i++) {
    const date = new Date(baseDate)
    date.setDate(baseDate.getDate() + i)
    dates.push(`${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`)
  }

  return dates.map((date) => ({
    date,
    hostVulnerability: Math.floor(Math.random() * 50) + 100,
    webVulnerability: Math.floor(Math.random() * 30) + 70,
    configDefect: Math.floor(Math.random() * 20) + 50,
    weakPassword: Math.floor(Math.random() * 15) + 35
  }))
}

// 生成风险分布数据
export const generateRiskDistribution = (): RiskDistribution[] => {
  return [
    { level: 'high' as VulnerabilityLevel, count: 142 },
    { level: 'medium' as VulnerabilityLevel, count: 386 },
    { level: 'low' as VulnerabilityLevel, count: 530 },
    { level: 'info' as VulnerabilityLevel, count: 200 }
  ]
}

// 生成树节点数据
export const generateTreeNodes = (dimension: DimensionType): TreeNode[] => {
  switch (dimension) {
    case 'affected-business':
      // 受影响业务视角 - 使用business-management的真实业务名称
      const businessNames = [
        '一网通办门户-PC门户',
        '随申办APP-iOS版',
        '统一公共支付-支付网关',
        '统一身份认证',
        '统一客服',
        '统一物流快递',
        '公共信息库',
        '人口信息库',
        '企业开办一件事',
        '出生一件事'
      ]
      const businessNodes = businessNames.map((name, index) => ({
        id: `business-${index + 1}`,
        name,
        count: Math.floor(Math.random() * 80) + 30,
        checked: false
      }))
      // 添加"未知业务"默认节点
      businessNodes.push({
        id: 'business-unknown',
        name: '未知业务',
        count: Math.floor(Math.random() * 50) + 20,
        checked: false
      })
      return businessNodes

    case 'repair-department':
      // 修复单位视角 - 按责任单位展示
      const departmentNodes = DEPARTMENTS.map((name, index) => ({
        id: `dept-${index + 1}`,
        name,
        count: Math.floor(Math.random() * 120) + 60, // 统计未修复的脆弱性数量
        checked: false
      }))
      // 添加"未指派单位"默认节点
      departmentNodes.push({
        id: 'dept-unassigned',
        name: '未指派单位',
        count: Math.floor(Math.random() * 80) + 40,
        checked: false
      })
      return departmentNodes

    case 'vulnerability-type':
      return VULNERABILITY_TYPES.map((name, index) => ({
        id: `type-${index + 1}`,
        name,
        count: Math.floor(Math.random() * 250) + 100,
        checked: false
      }))

    default:
      return []
  }
}

// 生成脆弱性记录列表
export const generateVulnerabilityRecords = (count: number = 256): VulnerabilityRecord[] => {
  const records: VulnerabilityRecord[] = []

  for (let i = 0; i < count; i++) {
    const level = ['high', 'medium', 'low', 'info'][Math.floor(Math.random() * 4)] as VulnerabilityLevel
    const status = ['pending', 'processing', 'resolved', 'overdue'][Math.floor(Math.random() * 4)] as VulnerabilityStatus
    const businessSystem = BUSINESS_SYSTEMS[Math.floor(Math.random() * BUSINESS_SYSTEMS.length)]
    const department = DEPARTMENTS[Math.floor(Math.random() * DEPARTMENTS.length)]
    const vulnerabilityName = VULNERABILITY_NAMES[Math.floor(Math.random() * VULNERABILITY_NAMES.length)]

    records.push({
      id: `vuln-${i + 1}`,
      name: vulnerabilityName,
      cveNumber: Math.random() > 0.3 ? `CVE-2021-${String(Math.floor(Math.random() * 90000) + 10000)}` : '-',
      level,
      cvssScore: level === 'high' ? Math.random() * 2 + 8 : level === 'medium' ? Math.random() * 3 + 5 : Math.random() * 4 + 1,
      businessSystem,
      assetName: `${businessSystem.substring(0, 4)}-app-server-${String(i + 1).padStart(2, '0')}`,
      ipAddress: `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,
      discoveredTime: `2023-${String(Math.floor(Math.random() * 5) + 3).padStart(2, '0')}-${String(Math.floor(Math.random() * 28) + 1).padStart(2, '0')} ${String(Math.floor(Math.random() * 24)).padStart(2, '0')}:${String(Math.floor(Math.random() * 60)).padStart(2, '0')}:${String(Math.floor(Math.random() * 60)).padStart(2, '0')}`,
      status,
      assignee: status !== 'pending' ? ASSIGNEES[Math.floor(Math.random() * ASSIGNEES.length)] : null,
      department,
      description: `${vulnerabilityName}的详细描述信息。该漏洞存在远程代码执行风险,攻击者可直接构造恶意请求,触发远程代码执行。由于组件被大量用于业务系统,该漏洞导致攻击者可以控制目标服务器,危害极大。`,
      affectedScope: '受影响版本范围的详细说明',
      fixSuggestion: '1. 升级组件至最新版本\n2. 如无法立即升级,可采用临时缓解措施\n3. 使用安全防护设备或软件进行防护',
      processingRecords: [
        {
          id: `record-${i}-1`,
          timestamp: '2023-05-12 14:30:22',
          action: '漏洞被发现并录入系统',
          operator: '系统'
        },
        ...(status !== 'pending' ? [{
          id: `record-${i}-2`,
          timestamp: '2023-05-13 09:15:10',
          action: `分配给${department}处理`,
          operator: '管理员'
        }] : [])
      ]
    })
  }

  return records
}

// 生成未确认资产脆弱性列表
export const generateUnconfirmedAssetVulnerabilities = (count: number = 76): UnconfirmedAssetVulnerability[] => {
  const records: UnconfirmedAssetVulnerability[] = []

  for (let i = 0; i < count; i++) {
    const level = ['high', 'medium', 'low'][Math.floor(Math.random() * 3)] as VulnerabilityLevel
    const vulnerabilityType = VULNERABILITY_TYPES[Math.floor(Math.random() * VULNERABILITY_TYPES.length)]

    records.push({
      id: `unconfirmed-${i + 1}`,
      assetName: `未知${['服务器', '终端', '网络设备', '数据库'][Math.floor(Math.random() * 4)]} #${Math.random().toString(36).substring(2, 8).toUpperCase()}`,
      vulnerabilityType,
      riskLevel: level,
      discoveredTime: `2023-06-${String(Math.floor(Math.random() * 28) + 1).padStart(2, '0')} ${String(Math.floor(Math.random() * 24)).padStart(2, '0')}:${String(Math.floor(Math.random() * 60)).padStart(2, '0')}`
    })
  }

  return records
}

// 生成业务脆弱性树结构（用于BusinessTreeView）
export const generateBusinessVulnerabilityTree = () => {
  return {
    totalCount: 1258,
    unknownCount: 78,
    businesses: [
      {
        id: 'beam',
        name: '一梁',
        count: 389,
        children: [
          {
            id: 'beam-portal',
            name: '一网通办门户',
            count: 189,
            children: [
              { id: 'beam-portal-pc', name: 'PC门户', count: 95 },
              { id: 'beam-portal-h5', name: 'H5门户', count: 94 }
            ]
          },
          {
            id: 'beam-app',
            name: '随申办APP',
            count: 150,
            children: [
              { id: 'beam-app-ios', name: 'iOS版', count: 78 },
              { id: 'beam-app-android', name: 'Android版', count: 72 }
            ]
          },
          { id: 'beam-miniapp', name: '小程序入口', count: 50 }
        ]
      },
      {
        id: 'pillar',
        name: '四柱',
        count: 458,
        children: [
          {
            id: 'pillar-payment',
            name: '统一公共支付',
            count: 156,
            children: [
              { id: 'pillar-payment-gateway', name: '支付网关', count: 89 },
              { id: 'pillar-payment-reconciliation', name: '对账服务', count: 67 }
            ]
          },
          { id: 'pillar-auth', name: '统一身份认证', count: 142 },
          { id: 'pillar-service', name: '统一客服', count: 98 },
          { id: 'pillar-logistics', name: '统一物流快递', count: 62 }
        ]
      },
      {
        id: 'database',
        name: '一库',
        count: 233,
        children: [
          { id: 'database-public', name: '公共信息库', count: 98 },
          { id: 'database-population', name: '人口信息库', count: 87 },
          { id: 'database-spatial', name: '空间地理信息库', count: 48 }
        ]
      },
      {
        id: 'applications',
        name: '多应用',
        count: 100,
        children: [
          { id: 'app-enterprise', name: '企业开办一件事', count: 32 },
          { id: 'app-birth', name: '出生一件事', count: 28 },
          { id: 'app-marriage', name: '结婚落户一件事', count: 22 },
          { id: 'app-innovation', name: '创新创业一件事', count: 18 }
        ]
      }
    ]
  }
}

// 生成部门脆弱性列表（用于DepartmentListView）
export const generateDepartmentVulnerabilityList = () => {
  return {
    totalCount: 1258,
    unassignedCount: 98,
    departments: [
      { id: 'dept-1', name: '基础架构组', count: 342 },
      { id: 'dept-2', name: '订单运营组', count: 268 },
      { id: 'dept-3', name: '用户中心开发部', count: 235 },
      { id: 'dept-4', name: '支付开发部', count: 198 },
      { id: 'dept-5', name: '数据平台组', count: 117 }
    ]
  }
}

// 获取业务树节点下的所有业务系统名称（递归）
export const getBusinessNamesFromNode = (nodeId: string): string[] => {
  const businessTree = generateBusinessVulnerabilityTree()

  if (nodeId === 'all') {
    return BUSINESS_SYSTEMS
  }

  if (nodeId === 'business-unknown') {
    return []
  }

  // 递归查找节点并获取所有子节点的名称
  const findNodeBusinesses = (nodes: any[], targetId: string): string[] => {
    for (const node of nodes) {
      if (node.id === targetId) {
        // 找到目标节点，收集所有子节点名称
        const collectNames = (n: any): string[] => {
          if (n.children && n.children.length > 0) {
            return n.children.flatMap((child: any) => collectNames(child))
          }
          return [n.name]
        }
        return collectNames(node)
      }

      if (node.children) {
        const result = findNodeBusinesses(node.children, targetId)
        if (result.length > 0) return result
      }
    }
    return []
  }

  return findNodeBusinesses(businessTree.businesses, nodeId)
}

// 获取部门名称
export const getDepartmentName = (deptId: string): string | null => {
  const departmentList = generateDepartmentVulnerabilityList()

  if (deptId === 'all') {
    return null // 返回null表示不筛选
  }

  if (deptId === 'dept-unassigned') {
    return '' // 空字符串表示未指派
  }

  const dept = departmentList.departments.find(d => d.id === deptId)
  return dept ? dept.name : null
}

